*** util/nad.c.orig	Mon May 31 23:31:06 2004
--- util/nad.c	Thu Sep 23 13:57:41 2004
***************
*** 157,163 ****
      nad_t nad;
  
  #ifndef NAD_DEBUG
!     if(*cache != NULL)
      {
          nad = *cache;
          *cache = nad->next;
--- 157,165 ----
      nad_t nad;
  
  #ifndef NAD_DEBUG
!     /* If cache==NULL, then this NAD is not in a cache */
! 
!     if ((cache!=NULL) && (*cache != NULL))
      {
          nad = *cache;
          *cache = nad->next;
***************
*** 195,202 ****
  
      if(nad == NULL) return NULL;
  
!     /* get one from the cache */
!     copy = nad_new(nad->cache);
  
      /* if it's not large enough, make bigger */
      NAD_SAFE(copy->elems, nad->elen, copy->elen);
--- 197,204 ----
  
      if(nad == NULL) return NULL;
  
!     /* create a new nad not participating in a cache */
!     copy = nad_new(NULL);
  
      /* if it's not large enough, make bigger */
      NAD_SAFE(copy->elems, nad->elen, copy->elen);
***************
*** 221,227 ****
      return copy;
  }
  
! /** plug a nad back in the cache */
  void nad_free(nad_t nad)
  {
      if(nad == NULL) return;
--- 223,229 ----
      return copy;
  }
  
! /** free nad, or plug nad back in the cache */
  void nad_free(nad_t nad)
  {
      if(nad == NULL) return;
***************
*** 234,249 ****
      xhash_zap(_nad_alloc_tracked, loc);
      xhash_put(_nad_free_tracked, pstrdup(xhash_pool(_nad_free_tracked), loc), (void *) nad);
      }
  
      free(nad->elems);
      free(nad->attrs);
      free(nad->cdata);
      free(nad->nss);
      free(nad->depths);
- #else
-     nad->next = *(nad->cache);
-     *(nad->cache) = nad;
- #endif
  }
  
  /** locate the next elem at a given depth with an optional matching name */
--- 236,257 ----
      xhash_zap(_nad_alloc_tracked, loc);
      xhash_put(_nad_free_tracked, pstrdup(xhash_pool(_nad_free_tracked), loc), (void *) nad);
      }
+ #else
+     /* If nad->cache != NULL, then put back into cache, otherwise this nad is not in a cache */
+ 
+     if (nad->cache != NULL) {
+        nad->next = *(nad->cache);
+        *(nad->cache) = nad;
+        return;
+     } 
+ #endif
  
+     /* Free nad */
      free(nad->elems);
      free(nad->attrs);
      free(nad->cdata);
      free(nad->nss);
      free(nad->depths);
  }
  
  /** locate the next elem at a given depth with an optional matching name */
