diff -ur s2s.orig/main.c s2s/main.c
--- s2s.orig/main.c	Mon Dec 27 15:57:45 2004
+++ s2s/main.c	Mon Dec 27 16:15:48 2004
@@ -276,6 +276,13 @@
                 xhash_iter_get(s2s->out, (const char **) &key, (void *) &conn);
                 log_debug(ZONE, "checking dialback state for outgoing conn %s", key);
                 _s2s_check_conn_routes(s2s, conn, "outgoing");
+
+                log_debug(ZONE, "checking pending verify requests for outgoing conn %s", key);
+                if (conn->verify > 0 && now > conn->last_verify + s2s->check_queue) {
+                    log_write(s2s->log, LOG_NOTICE, "[%d] [%s, port=%d] dialback verify request timed out", conn->fd, conn->ip, conn->port);
+                    sx_error(conn->s, stream_err_CONNECTION_TIMEOUT, "dialback verify request timed out");
+                    sx_close(conn->s);
+                }
             } while(xhash_iter_next(s2s->out));
 
         /* incoming open streams */
diff -ur s2s.orig/out.c s2s/out.c
--- s2s.orig/out.c	Mon Dec 27 15:57:45 2004
+++ s2s/out.c	Mon Dec 27 16:10:32 2004
@@ -313,9 +313,15 @@
         log_debug(ZONE, "writing packet for %s to outgoing conn %s", rkey, ipport);
 
         /* send it straight out */
-        if(pkt->db)
+        if(pkt->db) {
             sx_nad_write(out->s, pkt->nad);
-        else
+
+            /* if this is a db:verify packet, increment counter and set timestamp */
+            if(NAD_ENAME_L(pkt->nad, 0) == 6 && strncmp("verify", NAD_ENAME(pkt->nad, 0), 6) == 0) {
+                out->verify++;
+                out->last_verify = time(NULL);
+            }
+        } else
             sx_nad_write_elem(out->s, pkt->nad, 1);
 
         /* update timestamp */
@@ -818,6 +824,9 @@
     free(rkey);
 
     nad_free(nad);
+
+    /* decrement outstanding verify counter */
+    --out->verify;
 
     /* let them know what happened */
     nad = nad_new(in->s->nad_cache);
diff -ur s2s.orig/s2s.h s2s/s2s.h
--- s2s.orig/s2s.h	Mon Dec 27 15:57:45 2004
+++ s2s/s2s.h	Mon Dec 27 15:59:10 2004
@@ -180,7 +180,12 @@
     time_t              init_time;
 
     int                 online;
+    
+    /** number and last timestamp of outstanding db:verify requests */
+    int                 verify;
+    time_t              last_verify;
 
+    /** timestamps for idle timeouts */
     time_t              last_activity;
     time_t              last_packet;
 };
