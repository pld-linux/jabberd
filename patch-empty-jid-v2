diff -ur ../jabberd-2.0s6/c2s/authreg.c ./c2s/authreg.c
--- ../jabberd-2.0s6/c2s/authreg.c	Thu Nov 25 20:56:36 2004
+++ ./c2s/authreg.c	Tue Dec 21 17:31:17 2004
@@ -409,7 +409,7 @@
         sprintf(sess->c2s_id, "%d", sess->s->tag);
 
         /* the full user jid for this session */
-        sess->jid = jid_new(c2s->pc, sess->s->req_to, 0);
+        sess->jid = jid_new(c2s->pc, sess->s->req_to, -1);
         strcpy(sess->jid->node, username);
         strcpy(sess->jid->resource, resource);
         jid_prep(sess->jid);
@@ -682,7 +682,7 @@
     sprintf(sess->c2s_id, "%d", sess->s->tag);
 
     /* the user jid for this transaction */
-    sess->jid = jid_new(c2s->pc, sess->s->req_to, 0);
+    sess->jid = jid_new(c2s->pc, sess->s->req_to, -1);
     strcpy(sess->jid->node, username);
     jid_prep(sess->jid);
 
diff -ur ../jabberd-2.0s6/c2s/c2s.c ./c2s/c2s.c
--- ../jabberd-2.0s6/c2s/c2s.c	Mon May 24 01:50:25 2004
+++ ./c2s/c2s.c	Tue Dec 21 17:31:00 2004
@@ -176,7 +176,7 @@
             if(!sess->active && sess->sasl_authd && sess->result == NULL && strcmp(root, "iq") == 0 && nad_find_attr(nad, 0, -1, "type", "set") >= 0) {
                 /* resource bind */
                 if(!sess->bound && (ns = nad_find_scoped_namespace(nad, uri_BIND, NULL)) >= 0 && (elem = nad_find_elem(nad, 0, ns, "bind", 1)) >= 0) {
-                    sess->jid = jid_new(sess->c2s->pc, sess->s->auth_id, 0);
+                    sess->jid = jid_new(sess->c2s->pc, sess->s->auth_id, -1);
 
                     /* get the resource */
                     elem = nad_find_elem(nad, elem, ns, "resource", 1);
diff -ur ../jabberd-2.0s6/c2s/main.c ./c2s/main.c
--- ../jabberd-2.0s6/c2s/main.c	Sat Nov 13 18:13:56 2004
+++ ./c2s/main.c	Tue Dec 21 17:38:34 2004
@@ -297,7 +297,7 @@
 
             /* authzid must be a valid jid */
             jid.pc = c2s->pc;
-            if(jid_reset(&jid, creds->authzid, 0) == NULL)
+            if(jid_reset(&jid, creds->authzid, -1) == NULL)
                 return 1;
 
             /* and have domain == stream to addr */
@@ -314,7 +314,7 @@
             s = (sx_t) sd->app_private;
 
             jid.pc = c2s->pc;
-            jid_reset(&jid, s->req_to, 0);
+            jid_reset(&jid, s->req_to, -1);
 
             for(i = 0; i < 256; i++) {
                 r = (int) (36.0 * rand() / RAND_MAX);
diff -ur ../jabberd-2.0s6/sm/mod_disco_publish.c ./sm/mod_disco_publish.c
--- ../jabberd-2.0s6/sm/mod_disco_publish.c	Sat Nov 13 18:08:33 2004
+++ ./sm/mod_disco_publish.c	Tue Dec 21 17:32:41 2004
@@ -277,7 +277,7 @@
                 di = (disco_item_t) malloc(sizeof(struct disco_item_st));
                 memset(di, 0, sizeof(struct disco_item_st));
 
-                di->jid = jid_new(mod->mm->sm->pc, str, 0);
+                di->jid = jid_new(mod->mm->sm->pc, str, -1);
 
                 if(os_object_get(os, o, "name", (void **) &str, os_type_STRING, &ot))
                     strncpy(di->name, str, 256);
diff -ur ../jabberd-2.0s6/sm/mod_roster.c ./sm/mod_roster.c
--- ../jabberd-2.0s6/sm/mod_roster.c	Sat Nov 13 18:08:33 2004
+++ ./sm/mod_roster.c	Tue Dec 21 17:32:25 2004
@@ -174,7 +174,7 @@
     if(pkt->from != NULL)
         jid_free(pkt->from);
 
-    pkt->from = jid_new(mod->mm->sm->pc, jid_user(sess->jid), 0);
+    pkt->from = jid_new(mod->mm->sm->pc, jid_user(sess->jid), -1);
     nad_set_attr(pkt->nad, 1, -1, "from", jid_full(pkt->from), 0);
 
     /* see if they're already on the roster */
@@ -609,7 +609,7 @@
                     item = (item_t) malloc(sizeof(struct item_st));
                     memset(item, 0, sizeof(struct item_st));
 
-                    item->jid = jid_new(mi->mod->mm->sm->pc, str, 0);
+                    item->jid = jid_new(mi->mod->mm->sm->pc, str, -1);
                     if(item->jid == NULL) {
                         log_debug(ZONE, "eek! invalid jid %s, skipping it", str);
                         jid_free(item->jid);
diff -ur ../jabberd-2.0s6/sm/pkt.c ./sm/pkt.c
--- ../jabberd-2.0s6/sm/pkt.c	Tue Oct  5 06:34:10 2004
+++ ./sm/pkt.c	Tue Dec 21 17:32:05 2004
@@ -84,13 +84,13 @@
 
     /* set replacement attrs */
     if(to != NULL) {
-        pnew->to = jid_new(pkt->sm->pc, to, 0);
+        pnew->to = jid_new(pkt->sm->pc, to, -1);
         nad_set_attr(pnew->nad, 1, -1, "to", jid_full(pnew->to), 0);
     } else if(pkt->to != NULL)
         pnew->to = jid_dup(pkt->to);
 
     if(from != NULL) {
-        pnew->from = jid_new(pkt->sm->pc, from, 0);
+        pnew->from = jid_new(pkt->sm->pc, from, -1);
         nad_set_attr(pnew->nad, 1, -1, "from", jid_full(pnew->from), 0);
     } else if(pkt->from != NULL)
         pnew->from = jid_dup(pkt->from);
@@ -350,7 +350,7 @@
 
     if(pkt->rto != NULL)
         jid_free(pkt->rto);
-    pkt->rto = jid_new(pkt->sm->pc, pkt->to->domain, 0);
+    pkt->rto = jid_new(pkt->sm->pc, pkt->to->domain, -1);
 
     if(pkt->rto == NULL) {
         log_debug(ZONE, "invalid to address on packet, unable to route");
@@ -362,7 +362,7 @@
 
     if(pkt->rfrom != NULL)
         jid_free(pkt->rfrom);
-    pkt->rfrom = jid_new(pkt->sm->pc, pkt->sm->id, 0);
+    pkt->rfrom = jid_new(pkt->sm->pc, pkt->sm->id, -1);
 
     if(pkt->rfrom == NULL) {
         log_debug(ZONE, "invalid from address on packet, unable to route");
@@ -422,13 +422,13 @@
 
     if(pkt->rto != NULL)
         jid_free(pkt->rto);
-    pkt->rto = jid_new(pkt->sm->pc, sess->c2s, 0);
+    pkt->rto = jid_new(pkt->sm->pc, sess->c2s, -1);
 
     nad_set_attr(pkt->nad, 0, -1, "to", pkt->rto->domain, 0);
 
     if(pkt->rfrom != NULL)
         jid_free(pkt->rfrom);
-    pkt->rfrom = jid_new(pkt->sm->pc, pkt->sm->id, 0);
+    pkt->rfrom = jid_new(pkt->sm->pc, pkt->sm->id, -1);
 
     nad_set_attr(pkt->nad, 0, -1, "from", pkt->rfrom->domain, 0);
 
--- sm/mod_roster.c.orig	Sat Nov 13 18:08:33 2004
+++ sm/mod_roster.c	Tue Dec 21 17:47:05 2004
@@ -456,7 +456,7 @@
     {
         /* extract the jid */
         attr = nad_find_attr(pkt->nad, elem, -1, "jid", NULL);
-        if(attr < 0)
+        if(attr < 0 || NAD_AVAL_L(pkt->nad, attr) == 0)
         {
             log_debug(ZONE, "no jid on this item, aborting");
 
--- util/jid.c.orig	Fri Apr 30 04:43:02 2004
+++ util/jid.c	Tue Dec 21 18:08:35 2004
@@ -169,14 +169,22 @@
     if(id == NULL)
         return jid;
 
-    if(len == 0)
+    if(len < 0)
         len = strlen(id);
 
+    if(len == 0)
+        return NULL;
+
     myid = (char *) malloc(sizeof(char) * (len + 1));
     sprintf(myid, "%.*s", len, id);
 
+    /* fail - only a resource or leading @ */
+    if (myid[0] == '/' || myid[0] == '@')
+        return NULL;
+
     /* get the resource first */
     cur = strstr(myid, "/");
+
     if(cur != NULL)
     {
         *cur = '\0';
--- sm/mod_roster.c.orig	Tue Dec 21 18:31:48 2004
+++ sm/mod_roster.c	Tue Dec 21 18:32:05 2004
@@ -612,7 +612,6 @@
                     item->jid = jid_new(mi->mod->mm->sm->pc, str, -1);
                     if(item->jid == NULL) {
                         log_debug(ZONE, "eek! invalid jid %s, skipping it", str);
-                        jid_free(item->jid);
                         free(item);
 
                     } else {
